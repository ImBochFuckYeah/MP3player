/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.imbochfuckyeah.mp3player;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author imboch
 */
public class NewPlaylist extends javax.swing.JFrame {

    private ArrayList<String> selectedSongs = new ArrayList<>();

    /**
     * Creates new form NewPlaylist
     */
    public NewPlaylist() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        playlistname = new javax.swing.JTextField();
        tbnchoose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        songslist = new javax.swing.JList<>();
        navbar = new javax.swing.JMenuBar();
        btnback = new javax.swing.JMenu();
        clear = new javax.swing.JMenu();
        saveas = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title1.setText("Name of playlist");

        tbnchoose.setText("Choose song");
        tbnchoose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbnchooseMousePressed(evt);
            }
        });

        jLabel1.setText("Songs selected");

        jScrollPane1.setViewportView(songslist);

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(containerLayout.createSequentialGroup()
                        .addComponent(playlistname, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbnchoose, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title1)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playlistname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbnchoose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnback.setText("Back");
        btnback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnbackMousePressed(evt);
            }
        });
        navbar.add(btnback);

        clear.setText("Clear all");
        clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clearMousePressed(evt);
            }
        });
        navbar.add(clear);

        saveas.setText("Save playlist");
        saveas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveasMousePressed(evt);
            }
        });
        navbar.add(saveas);

        setJMenuBar(navbar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbnchooseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbnchooseMousePressed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true); // Permitir selección múltiple
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos MP3", "mp3"));

        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = fileChooser.getSelectedFiles();
            for (File file : selectedFiles) {
                selectedSongs.add(file.getAbsolutePath()); // Agregar la ruta del archivo al ArrayList
            }
        }

        showSongsInList();
    }//GEN-LAST:event_tbnchooseMousePressed

    private void clearMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMousePressed
        int response = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas borrar los datos?", "Confirmación", JOptionPane.YES_NO_OPTION);

        if (response == JOptionPane.YES_OPTION) {
            clearAll();
        }
    }//GEN-LAST:event_clearMousePressed

    private void saveasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveasMousePressed
        savePlayList();
    }//GEN-LAST:event_saveasMousePressed

    private void btnbackMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnbackMousePressed
        dispose();

        MusicPlayer display = new MusicPlayer();
        display.setLocationRelativeTo(null);
        display.setVisible(true);
    }//GEN-LAST:event_btnbackMousePressed

    /* FUNCTIONS */
    private void showSongsInList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (String songPath : selectedSongs) {
            File file = new File(songPath);
            listModel.addElement(file.getName());
        }

        songslist.setModel(listModel); // Establecer el modelo de lista actualizado en el JList
    }

    private void savePlayList() {
        String playlistName = playlistname.getText().trim(); // Obtener el texto del JTextField y quitar espacios en blanco

        if (playlistName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre de la lista de reproducción no puede estar vacío.", "Alerta", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (selectedSongs.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La lista de reproducción está vacía.", "Alerta", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String playlistLine = playlistName + "," + String.join(",", selectedSongs);

        try {
            FileWriter fw = new FileWriter("playlist.csv", true); // true para agregar al archivo sin sobrescribir
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);

            pw.println(playlistLine);

            pw.close();
            bw.close();
            fw.close();

            JOptionPane.showMessageDialog(this, "Lista de reproducción guardada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            clearAll();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar guardar la lista de reproducción.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearAll() {
        selectedSongs.clear(); // Borrar los datos del ArrayList

        DefaultListModel<String> listModel = (DefaultListModel<String>) songslist.getModel();
        listModel.clear(); // Borrar los elementos del JList

        playlistname.setText(""); // Limpiar el JTextField
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewPlaylist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewPlaylist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewPlaylist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewPlaylist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewPlaylist().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu btnback;
    private javax.swing.JMenu clear;
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar navbar;
    private javax.swing.JTextField playlistname;
    private javax.swing.JMenu saveas;
    private javax.swing.JList<String> songslist;
    private javax.swing.JButton tbnchoose;
    private javax.swing.JLabel title1;
    // End of variables declaration//GEN-END:variables
}
