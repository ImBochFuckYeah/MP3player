/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.imbochfuckyeah.mp3player;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.sound.sampled.AudioFormat;
import static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import static javax.sound.sampled.AudioSystem.getAudioInputStream;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author imboch
 */
public class MusicPlayer extends javax.swing.JFrame {

    private ArrayList<String> playlistSongs = new ArrayList<>();
    private int currentSongIndex;
    private AudioInputStream audioInputStream;
    private SourceDataLine line;
    private boolean isPlaying;
    private boolean isPaused;
    private boolean isStopped;
    private long startTimeMillis;
    private String audioFilePath;

    /**
     * Creates new form MusicPlayer
     */
    public MusicPlayer() {
        initComponents();
        this.currentSongIndex = 0;
        this.isPlaying = false;
        this.isPaused = false;
        this.isStopped = false;
        loadPlaylistsToComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playlistcontainer = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        playlistselect = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        songslist = new javax.swing.JList<>();
        title3 = new javax.swing.JLabel();
        playercontainer = new javax.swing.JPanel();
        title2 = new javax.swing.JLabel();
        namesong = new javax.swing.JLabel();
        progressbar = new javax.swing.JProgressBar();
        buttonscontainer = new javax.swing.JPanel();
        btnplay = new javax.swing.JButton();
        btnpause = new javax.swing.JButton();
        navbar = new javax.swing.JMenuBar();
        newplaylist = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        title1.setText("Select playlist");

        playlistselect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                playlistselectItemStateChanged(evt);
            }
        });

        jScrollPane1.setViewportView(songslist);

        title3.setText("Songs");

        javax.swing.GroupLayout playlistcontainerLayout = new javax.swing.GroupLayout(playlistcontainer);
        playlistcontainer.setLayout(playlistcontainerLayout);
        playlistcontainerLayout.setHorizontalGroup(
            playlistcontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistcontainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playlistcontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playlistselect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .addGroup(playlistcontainerLayout.createSequentialGroup()
                        .addGroup(playlistcontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title1)
                            .addComponent(title3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        playlistcontainerLayout.setVerticalGroup(
            playlistcontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistcontainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playlistselect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(title3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addContainerGap())
        );

        title2.setText("Listening");

        namesong.setFont(new java.awt.Font("Liberation Sans", 0, 36)); // NOI18N
        namesong.setText("No song is playing");

        javax.swing.GroupLayout playercontainerLayout = new javax.swing.GroupLayout(playercontainer);
        playercontainer.setLayout(playercontainerLayout);
        playercontainerLayout.setHorizontalGroup(
            playercontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playercontainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playercontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(playercontainerLayout.createSequentialGroup()
                        .addGroup(playercontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title2)
                            .addComponent(namesong))
                        .addGap(0, 197, Short.MAX_VALUE)))
                .addContainerGap())
        );
        playercontainerLayout.setVerticalGroup(
            playercontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playercontainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(namesong)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnplay.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        btnplay.setText("Play");
        btnplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnplayMousePressed(evt);
            }
        });

        btnpause.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        btnpause.setText("Pause");
        btnpause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnpauseMousePressed(evt);
            }
        });
        btnpause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonscontainerLayout = new javax.swing.GroupLayout(buttonscontainer);
        buttonscontainer.setLayout(buttonscontainerLayout);
        buttonscontainerLayout.setHorizontalGroup(
            buttonscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonscontainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnplay, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnpause, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(292, 292, 292))
        );
        buttonscontainerLayout.setVerticalGroup(
            buttonscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonscontainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonscontainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnplay, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(btnpause, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                .addContainerGap())
        );

        newplaylist.setText("New playlist");
        newplaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                newplaylistMousePressed(evt);
            }
        });
        navbar.add(newplaylist);

        setJMenuBar(navbar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(playlistcontainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playercontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(buttonscontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(playercontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playlistcontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonscontainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newplaylistMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newplaylistMousePressed
        dispose();

        NewPlaylist display = new NewPlaylist();
        display.setLocationRelativeTo(null);
        display.setVisible(true);
    }//GEN-LAST:event_newplaylistMousePressed

    private void btnplayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnplayMousePressed
        callToAction();
    }//GEN-LAST:event_btnplayMousePressed

    private void playlistselectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_playlistselectItemStateChanged
        clearAll();
        loadSongsToList();
    }//GEN-LAST:event_playlistselectItemStateChanged

    private void btnpauseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnpauseMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnpauseMousePressed

    private void btnpauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpauseActionPerformed
        pause();
    }//GEN-LAST:event_btnpauseActionPerformed

    /* FUNCTIONS BASICS */
    private void loadPlaylistsToComboBox() {
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

        try (BufferedReader br = new BufferedReader(new FileReader("playlist.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length > 0) {
                    comboBoxModel.addElement(parts[0]); // Agregar el nombre de la playlist al ComboBoxModel
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        playlistselect.setModel(comboBoxModel); // Establecer el ComboBoxModel en el JComboBox

        loadSongsToList();
    }

    private void loadSongsToList() {
        String selectedPlaylistName = (String) playlistselect.getSelectedItem();

        if (selectedPlaylistName != null) {
            DefaultListModel<String> listModel = new DefaultListModel<>();

            try (BufferedReader br = new BufferedReader(new FileReader("playlist.csv"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] parts = line.split(",");
                    if (parts.length > 0 && parts[0].equals(selectedPlaylistName)) {
                        for (int i = 1; i < parts.length; i++) {
                            playlistSongs.add(parts[i]);
                        }
                        break; // Salir del bucle si se encuentra la playlist seleccionada
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            for (String songPath : playlistSongs) {
                String songName = new File(songPath).getName();
                listModel.addElement(songName); // Agregar las canciones al modelo de lista
            }

            songslist.setModel(listModel); // Establecer el modelo de lista en el JList
        }
    }

    private void clearAll() {
        playlistSongs.clear(); // Borrar los datos del ArrayList

        DefaultListModel<String> listModel = (DefaultListModel<String>) songslist.getModel();
        listModel.clear(); // Borrar los elementos del JList
    }

    public void showSongPlaying(String songname) {
        namesong.setText(songname);
    }

    public void refreshProgressBar(int val) {
        progressbar.setValue(val);
    }

    private void callToAction() {
        if (!isPaused) {
            Thread playerThread = new Thread(() -> play());
            playerThread.start();
        } else {
            resume();
        }
    }
    
    private void setEstatusBtn(boolean estatus) {
        btnplay.setEnabled(estatus);
    }

    /* FUNCTIONS MP3*/
    public void play() {
        if (!isPlaying) {
            while (currentSongIndex < playlistSongs.size() && !isStopped) {
                if (!isPaused) {
                    playSong(playlistSongs.get(currentSongIndex));
                    currentSongIndex++;
                } else {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "There is already a song playing");
        }
    }

    public void pause() {
        isPaused = true;
        btnplay.setText("Resume");
        setEstatusBtn(true);
    }

    public void resume() {
        isPaused = false;
        btnplay.setText("Play");
        setEstatusBtn(false);
    }

    public void stop() {
        isStopped = true;
        if (line != null) {
            line.close();
        }
    }

    private void playSong(String filePath) {
        final File file = new File(filePath);

        try (final AudioInputStream in = getAudioInputStream(file)) {
        
            audioFilePath = file.getPath();
            showSongPlaying(file.getName());

            final AudioFormat outFormat = getOutFormat(in.getFormat());
            final DataLine.Info info = new DataLine.Info(SourceDataLine.class, outFormat);

            try (final SourceDataLine line = (SourceDataLine) AudioSystem.getLine(info)) {
                if (line != null) {
                    line.open(outFormat);
                    line.start();
                    stream(getAudioInputStream(outFormat, in), line);
                    line.drain();
                    line.stop();
                }
            }

        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException e) {
            throw new IllegalStateException(e);
        }
    }

    private AudioFormat getOutFormat(AudioFormat inFormat) {
        final int ch = inFormat.getChannels();
        final float rate = inFormat.getSampleRate();
        return new AudioFormat(PCM_SIGNED, rate, 16, ch, ch * 2, rate, false);
    }

    private void stream(AudioInputStream in, SourceDataLine line) throws IOException {
        final byte[] buffer = new byte[65536];
        int bytesRead;

        startTimeMillis = System.currentTimeMillis();

        int totalDurationInSeconds = 0;

        try {
            totalDurationInSeconds = getDurationInSeconds();
            progressbar.setMaximum(totalDurationInSeconds);
            System.out.println("Duración de la canción: " + totalDurationInSeconds + " segundos");
        } catch (UnsupportedAudioFileException | IOException e) {
            e.printStackTrace();
        }

        while ((bytesRead = in.read(buffer, 0, buffer.length)) != -1) {
            if (!isPaused && !isStopped) {
                line.write(buffer, 0, bytesRead);
                long currentTimeMillis = System.currentTimeMillis();
                long elapsedTimeMillis = currentTimeMillis - startTimeMillis;
                int elapsedTimeSeconds = (int) (elapsedTimeMillis / 1000);

                // Actualiza la barra de progreso
                progressbar.setValue(elapsedTimeSeconds);
            } else {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private int getDurationInSeconds() throws UnsupportedAudioFileException, IOException {
        int totalDurationInSeconds = 0;
        if (!audioFilePath.isEmpty()) {
            File audioFile = new File(audioFilePath);
            AudioFormat format = AudioSystem.getAudioFileFormat(audioFile).getFormat();
            long frames = AudioSystem.getAudioFileFormat(audioFile).getFrameLength();
            float frameRate = format.getFrameRate();

            totalDurationInSeconds = (int) (frames / frameRate);
        }
        return totalDurationInSeconds;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicPlayer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnpause;
    private javax.swing.JButton btnplay;
    private javax.swing.JPanel buttonscontainer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel namesong;
    private javax.swing.JMenuBar navbar;
    private javax.swing.JMenu newplaylist;
    private javax.swing.JPanel playercontainer;
    private javax.swing.JPanel playlistcontainer;
    private javax.swing.JComboBox<String> playlistselect;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JList<String> songslist;
    private javax.swing.JLabel title1;
    private javax.swing.JLabel title2;
    private javax.swing.JLabel title3;
    // End of variables declaration//GEN-END:variables

}
